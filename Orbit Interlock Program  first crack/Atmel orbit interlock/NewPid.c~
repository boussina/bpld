/*********************************************
This program was produced by the
CodeWizardAVR V1.0.2.1b Evaluation
Automatic Program Generator
© Copyright 1998-2001
Pavel Haiduc, HP InfoTech S.R.L.
http://infotech.ir.ro
e-mail:dhptechn@ir.ro , hpinfotech@xnet.ro

Project : 
Version : 
Date    : 5/4/2002
Author  : Freeware
Company : 
Comments: 


Chip type           : AT90S8535
Clock frequency     : 4.000000 MHz
Memory model        : Small
Internal SRAM size  : 512
External SRAM size  : 0
Data Stack size     : 128
*********************************************/

#include <90s8535.h>
#include <delay.h>        
#include <spi.h> // SPI driver routine
// Standard Input/Output functions
#include <stdio.h>        
#include <stdlib.h>
#include <math.h>      
#define ADC_BUSY PINB.0
#define NCONVST PORTB.1
#define ADC_VREF_TYPE 0x00
// Read the ADC conversion result
unsigned int read_adc(unsigned char adc_input)
{
ADMUX=adc_input|ADC_VREF_TYPE;
ADCSR|=0x40;
while ((ADCSR&0x10)==0);
ADCSR|=0x10;
return ADCW;
}

// Declare your global variables here
double value[10]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
int n=10;
int i=0;
int inc=0;
float z;
int current=0;
double sum,diff;
float goal;   
float temperature;
float k1,k2,k3,last[2]={0.0,0.0}; 
float pid_dt,pid_p,pid_i,pid_d;
float invalue=0.0,outvalue=0.0,error=0.0;  
float testvalue=0.0;
long pwmout=0;
char command[4];     
int warmup;          
int counter;    
char command2[10];
float eeprom *start;
void main(void)
{

// Declare your local variables here

// Input/Output Ports initialization
// Port A
PORTA=0x00;
DDRA=0x00;

// initialize PORTB
PORTB=0x00;
DDRB=0xB0;

// Port C
PORTC=0x00;
DDRC=0xFF;

// Port D
PORTD=0xFF;
DDRD=0x30;

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: Timer 0 Stopped
// Mode: Output Compare
// OC0 output: Disconnected
TCCR0=0x00;
TCNT0=0x00;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: 500.000 kHz
// Mode: 8 bit Pulse Width Modulation
// OC1A output: Non-Inv.
// OC1B output: Inverted
// Noise Canceler: Off
// Input Capture on Falling Edge
//TCCR1A=0xE1;
//TCCR1B=0x02;     
//TCCR1B=0x03; 
TCCR1A=0xA2;
TCCR1B=0x01;
TCNT1H=0x00;
TCNT1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;

// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: Timer 2 Stopped
// Mode: Output Compare
// OC2 output: Disconnected
TCCR2=0x00;
ASSR=0x00;
TCNT2=0x00;
OCR2=0x00;

// External Interrupt(s) initialization
// INT0: Off
// INT1: Off
GIMSK=0x00;
MCUCR=0x00;

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=0x00;

// UART initialization
// Communication Parameters: 8 Data, 1 Stop, No Parity
// UART Receiver: On
// UART Transmitter: On
// UART Baud rate: 19200
UCR=0x18;   
//UBRR=0X19;
UBRR=0x17;
// Analog Comparator initialization
// Analog Comparator: Off
// Analog Comparator Input Capture by Timer/Counter 1: Off
ACSR=0x80;  
//spi initialization
SPCR=0x50;   
// ADC initialization
// ADC Clock frequency: 2000.000 kHz
ADCSR=0x81;    
WDTCR=0x0D;
pid_p=*(start+4);
pid_i=*(start+8);
pid_d=*(start+12);
pid_dt=*(start+16);
warmup=*(start+20);
goal=*(start+24);       
counter=0; 	
i=0;
while (1)
{    
	current=i%10;
	invalue=((float)read_adc(0)/1024.0)*5.0; 
	temperature=invalue;
	value[current]=-0.3663*pow(temperature,3)+4.2686*pow(temperature,2)-22.171*temperature+99.329;
	error=goal-value[current];
	i++;
	
	if(i<10)
	{
		sum=0;
		diff=0;
       for(inc=0;inc<i;inc++)
       {
			 diff=diff+(value[inc+1]-value[inc]);
			 sum=sum+value[inc];
		}
	}
	if(i>10)
	{
		 sum=0;
		 diff=0;
		 for(inc=0;inc<10;inc++)
		 {
			  diff=diff+(value[inc+1]-value[inc]);
			 sum=sum+value[inc];
		 }
	}
	outvalue=pid_p+(pid_i*sum*pid_dt)+(pid_d*diff/pid_dt);  
	pwmout=(int)((outvalue); 
	if(error>2)
	{
		pwmout=500;
		for(i=0;i<10;i++)
		{
		   value[i]=0;
		}
		i=0;
	}
	if(error<-2)
	{
		pwmout=0;
		for(i=0;i<10;i++)
		{
		   value[i]=0;
		}
		i=0;
	}
	OCR1AH=pwmout>>8;
	OCR1AL=0x00ff & pwmout;     
	OCR1BH=pwmout>>8;
	OCR1BL=0x00ff & pwmout;

	last[1]=last[0];
	last[0]=error; 
	PORTB.4=0; 
        spi(0x09);  
        spi((int)((error/5)*255));
        PORTB.4=1;  
        PORTB.4=0; 
        spi(0x0A);  
        spi((int)((temperature/5)*255));
        PORTB.4=1;
      if(USR.7==1)
      {
         gets(command, 2);
      switch (command[0])
      {	         
	case 'i':  
	   if(command[1]=='?')   
	   {   
	      ftoa(pid_i,2,command2);     	   
	      printf("%s",command2);
	   }
	   else 
	   {
	      gets(command, 5);   
	      pid_i=atof(command);         
	      *(start+8)=pid_i;   
	      outvalue=0;
	   }
	   break;
	case 'd':      //derivitive    
	   if(command[1]=='?')      
	   {     
	      ftoa(pid_d,2,command2);     
	      printf("%s",command2);
	   }
	   else
	   {
	      gets(command, 5); 
	      pid_d=atof(command);
	      *(start+12)=pid_d;
	      outvalue=0;
	   }
	   break;
	case 'p':	//proportional 
	   if(command[1]=='?')         
	   {     
	      ftoa(pid_p,2,command2);     
	      printf("%s",command2);
	   }
	   else
	   {                      
	      gets(command, 5);    
	      pid_p=atof(command);
	      *(start+4)=pid_p;   
	      outvalue=0;
	   }
	      break;
	case 't':	//time
	   if(command[1]=='?')
	   {             
	      ftoa(pid_dt,2,command2);     
	      printf("%s",command2);
	   }
	   else
	   {                 
	      gets(command, 5);
	      pid_dt=atof(command);
	     *(start+16)=pid_dt;   
	     outvalue=0;
	   }
	      break;
	case 'g':	//goal
	   if(command[1]=='?')
	   {    
	      ftoa(goal,2,command2);     
	      printf("%s",command2);
	   }
	   else
	   {          
	      gets(command, 5);     
	      goal=atof(command);
	      *(start+24)=goal; 
	      outvalue=0;
	   }
	      break;
	case 'e':	//error tolerance
	   if(command[1]=='?')   
	   {
	      ftoa(error,2,command2);     
	      printf("%s",command2);
	   }
 	   break;     
	 case 'r': 
	  if(command[1]=='?')  
	  {    
	      ftoa(invalue,2,command2);     
	      printf("%s",command2);
	  }  
	  break;        
	  case 'o': 
	  if(command[1]=='?')  
	  {         
	      //ftoa(last[0],2,command2);     
	      printf("Axon Photonics\n");     
	      //ftoa(last[1],2,command2);     
	      printf("Revision 2.0"); 
	      //ftoa(testvalue,4,command2);     
	      //printf("\n %s",command2);     
	  }  
	  break;
	}     
	}         
	#asm("wdr");
	//delay_ms(20);
      }
}